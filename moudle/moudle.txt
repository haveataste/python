pip install virtualenv
# 查看命令帮助
virtualenv --help
# 创建虚拟环境
virtualenv venv
virtualenv --python=/usr/bin/python3.5 venv
virtualenv --no-site-packages venv # 如果不想使用系统的包,加上–no-site-packeages参数
# 启动虚拟环境
source venv/bin/activate
# 退出虚拟环境
deactivate
# 删除虚拟环境
rm -rf venv
# 注意事项：如果没有启动虚拟环境，系统也安装了pip工具，那么套件将被安装在系统环境中，为了避免发生此事，可以在~/.bashrc文件中加上：
export PIP_REQUIRE_VIRTUALENV=true或者让在执行pip的时候让系统自动开启虚拟环境：export PIP_RESPECT_VIRTUALENV=true

pip install virtualenvwrapper
# virtualenvwrapper是virtualenv的扩展管理包，用于更方便管理虚拟环境，它可以做：将所有虚拟环境整合在一个目录下、管理（新增，删除，复制）虚拟环境、切换虚拟环境
mkvirtualenv ENV
workon ENV
deactivate
rmvirtualenv ENV
mkproject mic               # 创建mic项目和运行环境mic
mktmpenv                    # 创建临时运行环境
lsvirtualenv [-b]           # 列出可用的运行环境
lssitepackages              # 列出当前环境安装了的包
# 默认virtualenvwrapper安装在/usr/local/bin下面，实际上需要运行virtualenvwrapper.sh文件才行；所以需要先进行配置一下：
# 创建虚拟环境管理目录:
mkdir $HOME/.local/virtualenvs
# 在~/.bashrc中添加行：
export VIRTUALENV_USE_DISTRIBUTE=1              # 总是使用 pip/distribute
export WORKON_HOME=$HOME/.local/virtualenvs     # 所有虚拟环境存储的目录
if [ -e $HOME/.local/bin/virtualenvwrapper.sh ];then
    source $HOME/.local/bin/virtualenvwrapper.sh
else if [ -e /usr/local/bin/virtualenvwrapper.sh ];then
    source /usr/local/bin/virtualenvwrapper.sh
    fi
fi
export PIP_VIRTUALENV_BASE=$WORKON_HOME
export PIP_RESPECT_VIRTUALENV=true
# 启动 virtualenvwrapper:
source ~/.bashrc

Sublist3r是一款简单易用的子域名枚举利器。从Sublist3r的GitHub主页（https://github.com/aboul3la/Sublist3r）上，我们可以了解到这是一款基于python开发使用OSINT技术的子域名枚举工具。帮助渗透测试者和bug捕获者收集目标域名的子域名。
OSINT是英文名“Open-source intelligence”的缩写，中文名称叫“公开来源情报”。从公众可见的信息中，查找所需目标的信息。说的通俗易懂一点，就是我想知道某某东西的详细信息，我在公开的信息里查找、检索，找到有关这个东西的任何内容都提取出来，最后将这些内容汇总，得到较为详细的信息。再说的通俗易懂一点就是：查资料。再再通俗一点就是：找百度。最终目标信息的准确度、详细程度均依赖于查找源。所以Sublist3r的原理就是这样，但是Sublist3r的查找源很多，不仅仅是在个别搜索引擎上查找。搜索源包括有百度、Yahoo、Google、Bing、Ask、Netcraft等等除此之外使用通过查找SSL证书、DNS、暴力枚举等这些手段去查找子域名。
可以通过git clone https://github.com/aboul3la/Sublist3r.git安装Sublist3r。
然后使用sudo pip install -r requirements.txt安装依赖库。
最后通过一个简单的命令查找子域名，这里以freebuf为例子。
python3 sublist3r.py -d freebuf.com网站内容越多查询时间越慢，可以加一个-v来实时显示找到的子域名。

# 在 Python 多线程中，变量是共享的，这也是相较多进程的一个优点，线程占用资源要少得多，但也导致多个 CPU 同时操作多个线程时会引起结果无法预测的问题，也就是说 Python 的线程不安全。
# 如何解决线程安全问题？CPython 解释器使用了加锁的方法。每个进程有一把锁，启动线程先加锁，结束线程释放锁。
# 计算密集型，用多进程; IO密集型，用多线程

import time
from threading import Thread
def m():
    while True:
        print(Thread.name, Thread.ident, 'Yes')
        time.sleep(1)
def f():
    while True:
        print(Thread.name, Thread.ident, 'Noo')
        time.sleep(1)
mt = Thread(target=m, args=())
ft = Thread(target=f, args=())
mt.start()
ft.start()

# pip install python-magic-bin==0.4.14 eyed3
import eyed3 as ed
audio = ed.load('x.mp3')
dir(audio.tag)
dir(audio.info)
